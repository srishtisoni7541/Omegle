<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Application</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

    <style>
        /* Existing styles */

        .video-call-screen {
            display: none;
        }

        .active-call {
            display: block;
        }

        .video-player {
            background-color: black;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #videos {
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            width: 100%;
            height: 100%;
        }

        #videos.full-screen {
            grid-template-columns: 1fr;
            /* Full screen layout */
        }

        #videos.small-frame {
            position: relative;
        }

        #localVideo.small-frame {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 150px;
            height: 100px;
            z-index: 99;
            border: 2px solid white;
        }

        #remoteVideo {
            width: 100%;
            height: 100%;
        }

        #incomingCallModal {
            display: none;
        }

        .show-modal {
            display: flex;
        }

        .control-container {
            background-color: #1f2937;
            padding: 10px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            z-index: 30;
            position: absolute;
        }

        .control-container svg {
            height: 24px;
            width: 24px;
            fill: #d1d5db;
            z-index: 99;
            position: relative;
        }


        /* Responsive styles for phone screens */
        @media (max-width: 640px) {
            .video-player {
                height: 100%;
                /* Adjust video height for smaller screens */
            }

            #localVideo.small-frame {
                width: 120px;
                /* Smaller local video frame */
                height: 80px;
                /* Adjusted height for local video */
            }

            .control-container {
                padding: 8px;
            }

            .control-container svg {
                height: 20px;
                width: 20px;
            }

            #videos {
                height: 60vh;
                /* Adjust video container height */
            }

            #videos.full-screen {
                height: 100vh;
                /* Full screen layout height */
            }

            .control-container {
                padding: 8px;
                border-radius: 40%;
                /* Slightly smaller controls */
            }

            /* Adjust modal for smaller screens */
            #incoming-call {
                padding: 4px;
                width: 80%;
            }

            #incoming-call .bg-white {
                padding: 4px;
            }
        }
    </style>

</head>

<body class="flex flex-col h-screen bg-gray-900 text-gray-100">

    <!-- Video Call Screen -->
    <div class="fixed videoblock hidden z-[222] w-full h-svh bg-black">
        <div id="videos" class="relative h-full flex items-center justify-center">
            <video class="video-player w-full h-full object-cover" id="localVideo" autoplay muted playsinline></video>
            <video class="video-player w-full h-full object-cover" id="remoteVideo" autoplay playsinline></video>
        </div>
        <div id="controls" class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-4">
            <div class="control-container bg-gray-800 p-2 rounded-full cursor-pointer" id="cameraButton">
                <svg width="21" height="14" viewBox="0 0 21 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M20.525 2.149C20.365 2.05 20.183 2 20 2C19.847 2 19.694 2.035 19.553 2.105L17 3.382V3C17 1.346 15.654 0 14 0H3C1.346 0 0 1.346 0 3V11C0 12.654 1.346 14 3 14H14C15.654 14 17 12.654 17 11V10.618L19.553 11.894C19.694 11.965 19.847 12 20 12C20.183 12 20.365 11.95 20.525 11.851C20.82 11.668 21 11.347 21 11V3C21 2.653 20.82 2.332 20.525 2.149ZM5 8.5C4.171 8.5 3.5 7.829 3.5 7C3.5 6.171 4.171 5.5 5 5.5C5.829 5.5 6.5 6.171 6.5 7C6.5 7.829 5.829 8.5 5 8.5Z"
                        fill="white" />
                </svg>
            </div>

            <div class="control-container bg-red-600 p-2 rounded-full cursor-pointer" id="hangup">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="text-white">
                    <path d="M0 0h24v24H0z" fill="none" />
                    <path
                        d="M20 15.5c-.78 0-1.55-.3-2.12-.88l-1.43-1.42a4.007 4.007 0 0 0-5.54 0l-1.43 1.42A2.983 2.983 0 0 1 4 15.5c-.78 0-1.55-.3-2.12-.88A2.983 2.983 0 0 1 1 12.5a2.983 2.983 0 0 1 .88-2.12l7-7a4.007 4.007 0 0 1 5.54 0l7 7c.58.58.88 1.34.88 2.12s-.3 1.55-.88 2.12c-.58.58-1.34.88-2.12.88z" />
                </svg>
            </div>

            <div class="control-container bg-gray-800 p-2 mt-[-5vw] rounded-full z-[9999] cursor-pointer"
                id="micButton">
                <svg width="20" height="20" viewBox="0 0 14 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd"
                        d="M7 12.5C8.7 12.5 10 11.2 10 9.5V3.5C10 1.8 8.7 0.5 7 0.5C5.3 0.5 4 1.8 4 3.5V9.5C4 11.2 5.3 12.5 7 12.5ZM12.3 9.5C12.3 12.5 9.8 14.6 7 14.6C4.2 14.6 1.7 12.5 1.7 9.5H0C0 12.9 2.7 15.7 6 16.2V19.5H8V16.2C11.3 15.7 14 12.9 14 9.5H12.3Z"
                        fill="white" />
                </svg>
            </div>
        </div>
    </div>


    <!-- Incoming Call Modal -->
    <div id="incoming-call"
        class="fixed hidden z-[222] w-full h-dvh bg-gray-900 bg-opacity-75 flex items-center justify-center">
        <div class="bg-white p-8 rounded-md text-center">
            <p class="mb-4">Incoming Call...</p>
            <button id="accept-call" class="bg-green-500 text-white py-2 px-4 rounded-md">Accept</button>
            <button id="reject-call" class="bg-red-500 text-white py-2 px-4 rounded-md ml-2">Reject</button>
        </div>
    </div>

    <!-- Chat Section -->
    <div class="flex-1 flex flex-col overflow-y-auto">
        <div id="message-container" class="flex-1 p-4 space-y-4 overflow-y-auto">

        </div>
        <div class="bg-gray-900 p-4 flex items-center">
            <form class="chatform w-full flex ">
                <input type="text" id="messageInput"
                    class="flex-1 w-full border border-gray-700 rounded-md px-3 py-2 bg-gray-800 text-white focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    placeholder="Type a message">
                <button type="submit" id="sendMessage"
                    class="ml-2 bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700">
                    Send
                </button>
            </form>
            <button id="video-call-btn" class="ml-2 bg-green-600 text-white p-2 rounded-md hover:bg-green-700">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"
                    class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M19 13.5A7.5 7.5 0 0110 20.5h-1.933A7.5 7.5 0 011 13.5h1.933A7.5 7.5 0 0110 6.5h1.933A7.5 7.5 0 0119 13.5z" />
                </svg>
            </button>
        </div>
    </div>

    <video id="local-video" class="hidden" autoplay></video>
    <video id="remote-video" class="hidden" autoplay></video>


    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"
        integrity="sha384-2huaZvOR9iDzHqslqwpR87isEmrfxqyWOF7hr7BY6KG0+hVKLoEXMPUJw3ynWuhO"
        crossorigin="anonymous"></script>
        <script>
            const socket = io();
            let room;
            const chatform = document.querySelector('.chatform');
            const msgbox = document.querySelector('#messageInput');
            const videoCall = document.querySelector('.videoblock');
            const cameraButton = document.querySelector('#cameraButton');
            const micButton = document.querySelector('#micButton');
        
            socket.emit('userconnect');
        
            socket.on('joined', function (roomname) {
                room = roomname;
            });
        
            chatform.addEventListener('submit', function (event) {
                event.preventDefault();
                const message = msgbox.value;
                const currentTime = new Date().toLocaleTimeString();
                socket.emit('message', { room, message, currentTime });
                attachMessage(message);
                msgbox.value = "";
            });
        
            socket.on('message', function (message) {
                receiveMessage(message);
            });
        
            function attachMessage(message) {
                const userMessageContainer = document.createElement('div');
                userMessageContainer.classList.add('flex', 'my-2', 'justify-end');
        
                const userMessageDiv = document.createElement('div');
                userMessageDiv.classList.add('bg-blue-500', 'text-white', 'p-3', 'rounded-lg', 'max-w-xs');
        
                const userMessageText = document.createElement('p');
                userMessageText.textContent = message;
        
                userMessageDiv.appendChild(userMessageText);
                userMessageContainer.appendChild(userMessageDiv);
        
                document.getElementById('message-container').appendChild(userMessageContainer);
                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }
        
            function receiveMessage(message) {
                const messageContainer = document.createElement('div');
                messageContainer.classList.add('flex', 'my-2', 'justify-start');
        
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('bg-gray-300', 'text-gray-800', 'p-3', 'rounded-lg', 'max-w-xs');
        
                const messageText = document.createElement('p');
                messageText.textContent = message;
        
                messageDiv.appendChild(messageText);
                messageContainer.appendChild(messageDiv);
        
                document.getElementById('message-container').appendChild(messageContainer);
                document.querySelector("#message-container").scrollTop = document.querySelector("#message-container").scrollHeight;
            }
        
            // WEBRTC START
            let localStream;
            let remoteStream;
            let peerConnection;
            let inCall = false;
        
            const rtcSettings = {
                iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
            };
        
            const initialize = async () => {
                socket.on("signalingMessage", handleSignalingMessage);
        
                try {
                    localStream = await navigator.mediaDevices.getUserMedia({
                        audio: true,
                        video: true
                    });
                    document.querySelector("#localVideo").srcObject = localStream;
                    document.querySelector("#localVideo").style.display = "block";
                    initiateOffer();
                    inCall = true;
                } catch (err) {
                    console.log("Rejected by browser: " + err);
                }
            };
        
            const initiateOffer = async () => {
                await createPeerConnection();
                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);
                    socket.emit("signalingMessage", {
                        room,
                        message: JSON.stringify({
                            type: "offer",
                            offer
                        })
                    });
                } catch (err) {
                    console.log("Error in creating offer: " + err);
                }
            };
        
            const createPeerConnection = () => {
                peerConnection = new RTCPeerConnection(rtcSettings);
        
                remoteStream = new MediaStream();
                document.querySelector("#remoteVideo").srcObject = remoteStream;
                document.querySelector("#remoteVideo").style.display = "block";
        
                localStream.getTracks().forEach(track => {
                    peerConnection.addTrack(track, localStream);
                });
        
                peerConnection.ontrack = (event) => {
                    event.streams[0].getTracks().forEach(track => {
                        remoteStream.addTrack(track);
                    });
                };
        
                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        console.log("Sending Ice Candidates");
                        socket.emit("signalingMessage", {
                            room,
                            message: JSON.stringify({
                                type: "candidate",
                                candidate: event.candidate
                            })
                        });
                    }
                };
        
                peerConnection.onconnectionstatechange = () => {
                    console.log("Connection state changed: ", peerConnection.connectionState);
                };
            };
        
            const handleSignalingMessage = async (message) => {
                const { type, offer, answer, candidate } = JSON.parse(message);
                if (type === "offer") handleOffer(offer);
                if (type === "answer") handleAnswer(answer);
                if (type === "candidate" && peerConnection) {
                    try { await peerConnection.addIceCandidate(candidate); }
                    catch (error) {
                        console.log(error);
                    }
                }
                if (type === "hangup") {
                    hangup();
                }
            };
        
            const handleOffer = async (offer) => {
                await createPeerConnection();
                try {
                    await peerConnection.setRemoteDescription(offer);
                    const answer = await peerConnection.createAnswer();
                    await peerConnection.setLocalDescription(answer);
                    socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "answer", answer }) });
                    inCall = true;
                } catch (error) {
                    console.log("Failed to handle offer");
                }
            };
        
            const handleAnswer = async (answer) => {
                try {
                    await peerConnection.setRemoteDescription(answer);
                } catch (error) {
                    console.log("Failed to handle answer");
                }
            };
        
            document.querySelector("#video-call-btn").addEventListener("click", function () {
                socket.emit("startVideoCall", { room });
            });
        
            socket.on("incomingCall", function () {
                document.querySelector("#incoming-call").classList.remove("hidden");
            });
        
            socket.on("callAccepted", function () {
                initialize();
                document.querySelector(".videoblock").classList.remove("hidden");
                adjustVideoLayout();
            });
        
            document.querySelector("#accept-call").addEventListener("click", function () {
                document.querySelector("#incoming-call").classList.add("hidden");
                initialize();
                document.querySelector(".videoblock").classList.remove("hidden");
                adjustVideoLayout();
                socket.emit("acceptCall", { room });
            });
        
            document.querySelector("#reject-call").addEventListener("click", function () {
                document.querySelector("#incoming-call").classList.add("hidden");
                socket.emit("rejectCall", { room });
            });
        
            socket.on("callRejected", function () {
                alert("Call rejected by other user");
            });
        
            document.querySelector("#hangup").addEventListener("click", function () {
                hangup();
            });
        
            function hangup() {
                if (peerConnection) {
                    peerConnection.close();
                    peerConnection = null;
                    localStream.getTracks().forEach(track => track.stop());
        
                    document.querySelector(".videoblock").classList.add("hidden");
                    socket.emit("signalingMessage", { room, message: JSON.stringify({ type: "hangup" }) });
                    inCall = false;
                }
            }
        
            function toggleAudio() {
                const audioTracks = localStream.getAudioTracks();
                if (audioTracks.length > 0) {
                    const isEnabled = audioTracks[0].enabled;
                    audioTracks[0].enabled = !isEnabled;
                    document.querySelector('#micButton').classList.toggle('muted', isEnabled);
                }
            }
        
            function toggleVideo() {
                const videoTracks = localStream.getVideoTracks();
                if (videoTracks.length > 0) {
                    const isEnabled = videoTracks[0].enabled;
                    videoTracks[0].enabled = !isEnabled;
                    document.querySelector('#cameraButton').classList.toggle('stopped', isEnabled);
                }
            }
        
            // Event listeners for the audio and video buttons
            micButton.addEventListener('click', function () {
                toggleAudio();
            });
        
            cameraButton.addEventListener('click', function () {
                toggleVideo();
            });
        
            function adjustVideoLayout() {
                const videosContainer = document.querySelector("#videos");
                videosContainer.classList.add("small-frame");
                const localVideo = document.querySelector("#localVideo");
                localVideo.classList.add("small-frame");
                const remoteVideo = document.querySelector("#remoteVideo");
                remoteVideo.classList.remove("small-frame");
                const controllers = document.querySelectorAll('.control-container');
                controllers.forEach(controller => controller.style.zIndex = 999999);
            }
        </script>
        

</body>

</html>